#_(ns janus.core
  (:require [primitives#abc123 as base]))

;; (emit :env {def ~(μ [name body]
;;                     (emit :env {name ~body}))})

(def wrap
  "Wraps a μ or primitive that takes only literal values in a function that
  evals its arguments."
  (μ f
     ~(μ args
         ~(~f . ~~args))))

(def fn
  (μ [params body]
     ~(μ args
         ~((μ ~params ~~body) . ~~args))))

(def defn
  (μ [name params body]
     ~(def ~name
        (μ ~name args
           ~((μ ~params ~~body) . ~~args)))))

(def if
  (μ [pred t f]
     ~~(select ~~pred ~t ~f)))

(def when
  (μ [pred then]
     ~(if ~pred ~then (emit))))

;;;;; Wrappers around non-evaluating primitives

(def nth (wrap . nth*))

(def count (wrap . count*))

(def first (wrap . first*))
(def rest (wrap . rest*))

(def + (wrap . +*))
(def - (wrap . -*))
(def * (wrap . **))
(def / (wrap . /*))

(def > (wrap . >*))
(def < (wrap . <*))
(def = (wrap . =*))

(def mod (wrap . mod*))

;;;;; The start of a language library.

(defn even? [x]
  (= 0 (mod x 2)))

(defn odd? [x]
  (= 1 (mod x 2)))

(defn inc [x]
  (+ x 1))

(defn map [f x]
  (f x))

(defn filter [p x]
  (when (p x) x))

(defn ! [n]
  (if (= n 0)
    1
    (* n (! (- n 1)))))

(defn iterate* xs
  (if (= (count xs) 1)
    (first xs)
    (emit iterate* ~(rest xs) :return ~(first xs))))

(defn iterate [xs]
  (iterate* . xs))

(defn range [from to]
  (when (< from to)
    (emit range [~(inc from) to] :return ~from)))
