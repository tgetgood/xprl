;; Isn't it crazy that `def` itself isn't built in?
;; But then if the `:env` channel isn't hooked up correctly, you can't define
;; `def` at all, which is a pretty hardcore form of sandboxing...
(emit :env [def ~(μ x ~(emit :env [~(nth* ~x 1) ~~(nth* ~x 2)] :return ~(nth* ~x 1)))]
      :return def)

;; REVIEW: This initial def cannot accept metadata like docstrings, file line &
;; col numbers, etc. So we'll need to use it to write a better one eventually.

(def defμ
  (μ x
     ~(def ~(nth* ~x 1)
        (μ ~(nth* ~x 1) ~(nth* ~x 2) ~~(nth* ~x 3)))))

(defμ fn x
  (μ args
     ~((μ ~(nth* ~x 1) ~~(nth* ~x 2)) . ~~args)))

(defμ defn x
  (defμ ~(nth* ~x 1) args
    ((μ ~(nth* ~x 2) ~~(nth* ~x 3)) . ~~args)))

(def defn2
  (μ params
     ~(def ~(nth* ~params 1)
        (μ ~(nth* ~params 1) x
           ~((μ ~(nth* ~params 2) ~~(nth* ~params 3)) . ~~x)))))

(defμ if x
  ~~(select ~~(nth* ~x 1) ~(nth* ~x 2) ~(nth* ~x 3)))

;; (defμ cond body
;;   ~~(select ~~(<* ~(count* ~body) 1)
;;     ~(emit)
;;     ~~(select ~~(nth* ~body 1)
;;        ~(nth* ~body 2)
;;        ~(cond ~(rest* ~(rest* ~body))))))

(defμ when x
  (if ~(nth* ~x 1) ~(nth* ~x 2) ~(emit)))

;; Primitive elevation

(def wrap
  ;; "Wraps a μ or primitive that takes only literal values in a function that
  ;; evals its arguments."
  (μ f
     ~(μ args
         ~(~f . ~~args))))

(def nth (wrap . nth*))

(def count (wrap . count*))

;; (def first (wrap . first*))
;; (def rest (wrap . rest*))

(def + (wrap . +*))
(def - (wrap . -*))
(def * (wrap . **))
(def / (wrap . /*))

(def > (wrap . >*))
(def < (wrap . <*))
(def = (wrap . =*))

(def first (wrap . first*))
(def rest (wrap . rest*))

(defn inc x (+ 1 (nth x 1)))

(def !1
  (μ !1 n
     ~~(select ~(=* ~n 0)
              1
              (** ~n ~(!1 . ~(-* ~n 1))))))
(defμ !2 n
  ~~(select ~(=* ~n 0)
              1
              (** ~n ~(!2 . ~(-* ~n 1)))))

(defμ !3 n
  (if (< n 2)
    1
    (* n (!3 . ~(- n 1)))))

(defμ !4 n
  (if (= n 0)
    1
    (* n (!4 . ~(- n 1)))))

(defn2 !5 n
  (if (= n 0)
    1
    (* n (!5 . (- n 1)))))

(defn !6 n
  (if (< n 2)
    1
    (* n (!6 . (- n 1)))))
