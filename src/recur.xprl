;; We need to derive a version of the fixed point (Y) combinator for μs.
;;
;; REVIEW: I've chosen to keep the (clj) interpreter absurdly simple. That means
;; no named μs, no destructuring, etc..
;;
;; That decision is painful right now, but I think it will pay off when it comes
;; time to bootstrap off of the jvm. I had better be right...

(emit :env [def ~(μ x ~(emit :env [~(nth* ~x 1) ~~(nth* ~x 2)] :return ~(nth* ~x 1)))]
      :return def)

(def !
  (μ x
     ~~(select ~(<* ~x 2)
               1
               ~(** ~x ~(! . ~(-* ~x 1))))))

(! . 1)
(! . 2)
(! . 3)

(! . 10)

;; Sadly, these don't quite work...

(def Y
  (μ f
     ~((μ x ~(f . ~(x . ~x)))
       .
       ~(μ x ~(f . ~(x . ~x))))))

(def AoY
  (μ f
     ~((μ g
          ~(μ x
              ~((f . ~(g . g)) . ~x)))
       .
       ~(μ g
           ~(μ x
               ~((f . ~(g . g)) . ~x))))))

(def !
  (AoY . ~(μ !
           ~(μ x
               ~~(select ~(<* ~x 2)
                         1
                         ~(** ~x ~(! . ~(-* ~x 1))))))))

(! . 1)
(! . 2)
(! . 3)

(! . 10)

(def !
  (μ !
     ~(μ x
         ~~(select ~(<* ~x 2)
                   1
                   ~(** ~x ~((~! . ~!) . ~(-* ~x 1)))))))

((! . !) . 5)

;; curry with self as first arg. Weird thought, but Curry was original.
(def sc
  (μ f
     ~(μ x
         ~((~f . ~~f) . ~x))))

(def !
  (sc . ~(μ !
             ~(μ x
                 ~~(select ~(<* ~x 2)
                           1
                           ~(** ~x ~((sc . !) . ~(-* ~x 1))))))))

(! . 1)
(! . 2)
(! . 3)

(! . 10)

(def !!
  (μ !
     ~(μ x
         ~~(select ~(<* ~x 2)
                   1
                   ~(** ~x ~(! . ~(-* ~x 1)))))))


(def !
  (sc . ~(μ f ~(!! . ~(sc . f)))))

(! . 1)

(! . 2)
(! . 3)

(! . 10)

;; (def rec
;;   (μ g
;;     ~(sc . ~(μ f
;;             ~(g . ~(sc . f))))))

;; (def !
;;   (rec . ~(μ !
;;              ~(μ x
;;                  ~~(select ~(<* ~x 2)
;;                            1
;;                            ~(** ~x ~(! . ~(-* ~x 1))))))))

;; (! . 1)

;; (! . 2)
;; (! . 3)

;; (! . 10)

;; curry with self as first arg. Weird thought, but Curry was original.
;; (def sc
;;   (μ f
;;      ~(μ x
;;          ~((~f . ~~f) . ~x))))

;; (def rec
;;   (μ g
;;     ~(sc . ~(μ f
;;                ~(g . ~(sc . f))))))

;; (def !body
;;   (μ x
;;      ~~(select ~(<* ~x 2)
;;                1
;;                ~(** ~x ~(! . ~(-* ~x 1))))))

;; (def ! (rec . ~(μ ! ~!body)))

;; (! . 1)

;; (! . 2)
;; (! . 3)

;; (! . 10)

;; (def defrec
;;   (μ x
;;      ~(def ~(nth* ~x 1)
;;         (rec . ~(μ ~(nth* ~x 1) ~~(nth* ~x 2))))))

;; ;; ;; Minimal failure
;; ;; (iev "(μ x ~(rec . ~(μ x ~x)))")

;; (defrec ! !body)

;; (def !
;;   (rec . ~(μ !
;;              ~(μ x
;;                  ~~(select ~(<* ~x 2)
;;                            1
;;                            ~(** ~x ~(! . ~(-* ~x 1))))))))

;; (def defμ
;;   (μ x
;;      ~(def ~(nth* ~x 1)
;;         (μ ~(nth* ~x 2) ~~(nth* ~x 3)))))

;; (defμ ! x
;;   (μ x
;;      ~~(select ~(<* ~x 2)
;;                1
;;                ~(** ~x ~(! . ~(-* ~x 1))))))

;; (! . 1)

;; (! . 2)
;; (! . 3)

;; (! . 10)
